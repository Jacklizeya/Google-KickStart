const fs = require("fs")


//    in real google, change smaple.txt to 0 ! 
//    if numbers, remember to convert by using parseInt, input is string, how to extrac tnumbers!
//    do not repeat i, j, k index, interference
const raw = fs.readFileSync(0, "utf8").trim().split("\n")

let T = parseInt(raw[0])
let startingrow = 1
let gap = parseInt(raw[1].split(" ")[0])



for (i = 1 ; i <= T; i++) {
    
//******************Donot change above */
    // console.log(startingrow)
    // console.log(gap)
    let C = parseInt(raw[startingrow].split(" ")[1])
    let data = []
    for (j = startingrow + 1; j <= startingrow + gap; j++) {
        data.push([parseInt(raw[j].split(" ")[0]), parseInt(raw[j].split(" ")[1])])
    }
    // console.log(data)

    let min = Infinity
    let max = -Infinity

    data.forEach(singleline => {if (singleline[0] < min) { min = singleline[0]}})
    data.forEach(singleline => {if (singleline[1] > max) { max = singleline[1]}})

    // console.log(min, max)
    let frequency = {}
    for (k = min +1; k <= max-1; k++) {
        for (m = 0; m < data.length; m++) {
            if (k > data[m][0] && k < data[m][1]) {if (frequency[k]) {frequency[k]++} else {frequency[k] = 1}}
        }
    }

    // console.log(frequency)

    let allLocationWithFrequency = Object.entries(frequency)
    allLocationWithFrequency.sort((a,b)=>{return (b[1] - a[1])})
    // console.log(allLocationWithFrequency)
    let location = []
    allLocationWithFrequency.forEach(element => location.push(parseInt(element[0])))
    // console.log("toppicklocaiton", location)
    if (location.length < C) {topC = location} else {topC = location.slice(0, C)}
    // console.log("TOP", topC)

    let count = data.length
    for (x= 0; x < topC.length; x++) {
        for (y= 0; y < data.length; y++) {
            if (topC[x] > data[y][0] && topC[x] < data[y][1]) {
                count ++
            }
        }
    }

    // console.log(count)


    let result = count
//*******************Donot change this line *******/       

    console.log(`Case #${i}: ${result}`)  
    startingrow = startingrow + gap + 1
    if (i !== T) {gap = parseInt(raw[startingrow].split(" ")[0])}
}
